{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9591d71e-9287-4da5-a708-e1bc72a8d9b0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   Temperature  Humidity  Wind_Speed  Cloud_Cover  Pressure     Rain\n",
      "0        23.72     89.59        7.33        50.50  1032.370     rain\n",
      "1        27.87     46.42        5.90         4.99   992.610  no rain\n",
      "2        25.06     83.00        1.37        14.85  1007.230  no rain\n",
      "3        23.62     74.30        7.05        67.25   982.632     rain\n",
      "4        20.59     96.85        4.64        47.67   980.820  no rain\n",
      "5        26.14     48.21       15.25        59.76  1049.730  no rain\n",
      "6        20.93     40.79        2.22        45.82  1014.173  no rain\n",
      "7        32.29     51.84        2.87        92.55  1006.040  no rain\n",
      "\n",
      "Encoded Dataset:\n",
      "   Temperature  Humidity  Wind_Speed  Cloud_Cover  Pressure  Rain\n",
      "0        23.72     89.59        7.33        50.50  1032.370     1\n",
      "1        27.87     46.42        5.90         4.99   992.610     0\n",
      "2        25.06     83.00        1.37        14.85  1007.230     0\n",
      "3        23.62     74.30        7.05        67.25   982.632     1\n",
      "4        20.59     96.85        4.64        47.67   980.820     0\n",
      "5        26.14     48.21       15.25        59.76  1049.730     0\n",
      "6        20.93     40.79        2.22        45.82  1014.173     0\n",
      "7        32.29     51.84        2.87        92.55  1006.040     0\n",
      "\n",
      "Model Coefficients:\n",
      "[-0.01280442  0.00902384  0.02566082  0.00434363 -0.00107671]\n",
      "Model Intercept:\n",
      "0.6993099687141243\n",
      "\n",
      "Predicted Rain Probability for [25, 70, 5, 50, 1000]: 0.27964526852768284\n",
      "Prediction: No Rain\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\kk\\anaconda3\\Lib\\site-packages\\sklearn\\base.py:493: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names\n",
      "  warnings.warn(\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "\n",
    "# Create the dataset\n",
    "data = {\n",
    "    'Temperature': [23.72, 27.87, 25.06, 23.62, 20.59, 26.14, 20.93, 32.29],\n",
    "    'Humidity': [89.59, 46.42, 83, 74.3, 96.85, 48.21, 40.79, 51.84],\n",
    "    'Wind_Speed': [7.33, 5.9, 1.37, 7.05, 4.64, 15.25, 2.22, 2.87],\n",
    "    'Cloud_Cover': [50.5, 4.99, 14.85, 67.25, 47.67, 59.76, 45.82, 92.55],\n",
    "    'Pressure': [1032.37, 992.61, 1007.23, 982.632, 980.82, 1049.73, 1014.173, 1006.04],\n",
    "    'Rain': ['rain', 'no rain', 'no rain', 'rain', 'no rain', 'no rain', 'no rain', 'no rain']\n",
    "}\n",
    "\n",
    "df = pd.DataFrame(data)\n",
    "print(df)\n",
    "\n",
    "# Encode the target variable (Rain) as binary\n",
    "label_encoder = LabelEncoder()\n",
    "df['Rain'] = label_encoder.fit_transform(df['Rain'])  # \"rain\" = 1, \"no rain\" = 0\n",
    "print(\"\\nEncoded Dataset:\")\n",
    "print(df)\n",
    "\n",
    "# Prepare data for regression\n",
    "X = df[['Temperature', 'Humidity', 'Wind_Speed', 'Cloud_Cover', 'Pressure']]\n",
    "y = df['Rain']\n",
    "\n",
    "# Train the linear regression model\n",
    "reg = LinearRegression()\n",
    "reg.fit(X, y)\n",
    "\n",
    "# Display the model coefficients and intercept\n",
    "print(\"\\nModel Coefficients:\")\n",
    "print(reg.coef_)\n",
    "print(\"Model Intercept:\")\n",
    "print(reg.intercept_)\n",
    "\n",
    "# Predict rain for a custom input example (replace these values with test cases as needed)\n",
    "example = [[25, 70, 5, 50, 1000]]  # Example weather conditions\n",
    "rain_prediction = reg.predict(example)\n",
    "print(f\"\\nPredicted Rain Probability for {example[0]}: {rain_prediction[0]}\")\n",
    "\n",
    "# Threshold the prediction for classification (0 or 1)\n",
    "if rain_prediction[0] >= 0.5:\n",
    "    print(\"Prediction: Rain\")\n",
    "else:\n",
    "    print(\"Prediction: No Rain\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2266ac0e-5b60-4d02-9050-a719e4f386c1",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
