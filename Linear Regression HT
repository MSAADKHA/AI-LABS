{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "48e04474-2c41-438b-a61d-bed4fef04c38",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\kk\\anaconda3\\Lib\\site-packages\\sklearn\\base.py:493: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Predicted Price for the new input: [289.93409843]\n",
      "Coefficients: [  1.59478436   4.14550232 -14.61175896  -9.79177629  -7.24296853\n",
      "   0.66467426 -34.37646792]\n",
      "Intercept: 3077.5268665923413\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "import matplotlib.pyplot as plt\n",
    "# Load dataset\n",
    "data = {\n",
    "    'RealSum': [194.03, 344.25, 264.1],\n",
    "    'Room Type': ['private room', 'private room', 'private room'],\n",
    "    'Person Capacity': [2, 4, 2],\n",
    "    'Cleanliness Rating': [10, 8, 9],\n",
    "    'Guest Satisfaction Overall': [93, 85, 87],\n",
    "    'Distance': [5.02, 0.48, 5.75],\n",
    "    'Longitudes': [4.90569, 4.90005, 4.97512],\n",
    "    'Latitudes': [52.41772, 52.37432, 52.36103]\n",
    "}\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "# Encoding categorical data\n",
    "le = LabelEncoder()\n",
    "df['Room Type'] = le.fit_transform(df['Room Type'])\n",
    "# Prepare input (features) and output (target)\n",
    "X = df.drop('RealSum', axis='columns')  # Features\n",
    "y = df['RealSum']  # Target variable\n",
    "# Create and train the model\n",
    "reg = LinearRegression()\n",
    "reg.fit(X, y)\n",
    "# Predict for a new sample\n",
    "new_data = [[0, 3, 8, 90, 1.0, 4.9, 52.3]]  # Adjusted inputs\n",
    "predicted_price = reg.predict(new_data)\n",
    "\n",
    "# Print model details\n",
    "print(\"Predicted Price for the new input:\", predicted_price)\n",
    "print(\"Coefficients:\", reg.coef_)\n",
    "print(\"Intercept:\", reg.intercept_)\n",
    "\n",
    "# Visualization\n",
    "plt.scatter(df['Person Capacity'], df['RealSum'], color='red', marker='+')\n",
    "plt.xlabel('Person Capacity')\n",
    "plt.ylabel('RealSum')\n",
    "plt.title('Person Capacity vs. RealSum')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ed23232b-93a8-4499-9a99-069b9c77802f",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
